# -*- coding: utf-8 -*-
"""FloodPredictionTEST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18LfwZMq-3SHM9Q1lfzTMLv8QIDYaFOgv
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

from google.colab import drive
drive.mount('/content/drive')

#Importing data
data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/FloodPrediction.csv")
data

data.isnull().sum()

data.drop(columns= ["Station_Names"], inplace=True)

imputer = SimpleImputer(missing_values=pd.NA, strategy="constant", fill_value=0)

imputer.fit(data[["Flood?"]])
data["Flood?"] = imputer.transform(data[["Flood?"]])

feature = data[["Sl", "Year", "Month", "Max_Temp", "Min_Temp", "Rainfall", "Relative_Humidity", "Wind_Speed", "Cloud_Coverage", "Bright_Sunshine", "Station_Number", "X_COR", "Y_COR", "LATITUDE", "LONGITUDE", "ALT", "Period"]]
label = data[["Flood?"]]

stratY = pd.DataFrame(label)
XX=data.loc[:, :'Period'].values
YY=data.loc[:, 'Flood?'].values
X_train, X_test, y_train, y_test = train_test_split(XX, YY, test_size = 0.25, random_state=0)

dtc = DecisionTreeClassifier(criterion='entropy',random_state=1)
dtc.fit(X_train,y_train)
y_pred_dtc = dtc.predict(X_test)

print("Accuracy for Decision Tree Classifier = {:.3f}".format(dtc.score(X_test, y_test)))
print("Error for Decision Tree Classifier = {:.3f}".format(1-dtc.score(X_test, y_test)))

LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_test, y_pred_dtc)

plt.figure(figsize =(12, 12))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

#plt.title("Confusion matrix: [Decision Tree Classifier]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 60})
plt.show()

knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train) #training
y_pred_knn = knn.predict(X_test)

print("Accuracy for KNeighbors Classifier = {:.3f}".format(knn.score(X_test, y_test)))
print("Error for KNeighbors Classifier = {:.3f}".format(1-knn.score(X_test, y_test)))

LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_test, y_pred_knn)

plt.figure(figsize =(12, 12))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

#plt.title("Confusion matrix: [K Nearest Neighbours Classifier]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 60})
plt.show()

lrm = LogisticRegression(random_state=0)
lrm.fit(X_train, y_train)
y_pred_lrm = lrm.predict(X_test)

print("Accuracy for Logistic Regression = {0:.3f}".format(lrm.score(X_test, y_test)))
print("Error for Logistic Regression = {0:.3f}".format(1-lrm.score(X_test, y_test)))

LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_test, y_pred_lrm)

plt.figure(figsize =(12, 12))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

#plt.title("Confusion matrix: [Logistic Regression]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 60})
plt.show()