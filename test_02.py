# -*- coding: utf-8 -*-
"""TEST-02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IMocXXSn_kE0TNM8kv2DQSUkJg3te7AS
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

data = pd.read_csv("dataset_v2.csv")
data

data.drop(columns=["Unnamed: 0"], inplace = True)
data

data.drop(axis = 'index', index = 6907)
data

def threshold_level(station_name):
  if station_name == "Bandarban":
    return 15.25
  if station_name == "Bogura":
    return 16.32
  if station_name == "Chattogram":
    return 4.60
  if station_name == "Chuadanga":
    return 12.05
  if station_name == "Coxs Bazar":
    return 6.25
  if station_name == "Dhaka":
    return 6.00
  if station_name == "Dinajpur":
    return 33.50
  if station_name == "Habiganj":
    return 9.50
  if station_name == "Jamalpur":
    return 17.00
  if station_name == "Mymensingh":
    return 12.50
  if station_name == "Netrokona":
    return 29.20
  if station_name == "Nilphamari":
    return 52.60
  if station_name == "Rajshahi":
    return 18.50
  if station_name == "Rangamati":
    return 17.85
  if station_name == "Rangpur":
    return 33.15
  if station_name == "Sirajganj":
    return 13.35
  if station_name == "Srimongal":
    return 11.75
  if station_name == "Sylhet":
    return 11.25
  if station_name == "Teknaf":
    return 12.25

data['Area_threshold'] = data['station'].map(threshold_level)
data

data['avg_wl'] = data['avg_wl'].astype(float)
data

def flood_marker(water_level):
  if water_level > 0:
    return 1
  else:
    return 0

data['Flood'] = (data['Area_threshold'] - (data['avg_wl'])).map(flood_marker)
data

data.to_csv('dataset_v3.csv')